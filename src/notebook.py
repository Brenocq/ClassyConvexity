
# -*- coding: utf-8 -*-
"""Feature Extraction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kugi_OpCIT7k51WFEBTsk_F0IFCtvgwd
"""

import matplotlib.pyplot as plt
import numpy as np
import cv2

qtyTrainData = 5

# Print classes

'''
for classNumber in range(0, 6):
    img_path = "../Data/aircraft-"+str(classNumber)+"/0.jpg"
    img = cv2.imread(img_path)
    plt.subplot(2, 3, classNumber+1)
    plt.imshow(img)
    plt.axis("off")
    plt.title("Class " + str(classNumber), fontsize=16)
'''


from scipy.spatial import ConvexHull, convex_hull_plot_2d

def showConvexHull(hull, classNumber):

    points = []
    
    for contour in hull:
        for point in contour:
            if(point[0][0]!=0 and point[0][0]!=199 and point[0][1]!=0 and point[0][1]!=199):
                points.append([point[0][0], point[0][1]])
    
    indexhull = ConvexHull(points)
    #print(hull.simplices) #print indexes
    

    for simplex in indexhull.simplices:
        plt.plot([points[simplex[0]][0], points[simplex[1]][0]], [points[simplex[0]][1], points[simplex[1]][1]], 'r-')

def calcAreaAircraft(img):
    totalNumPixels = 40000
    numBlackPixels = 0
    cont = 0
    for i in thresh:
        for j in i:
            cont=cont+1
            if(j==0):
                numBlackPixels=numBlackPixels+1
                
    return numBlackPixels/totalNumPixels*100

import math

def calcAreaConvexhull(hull):
    points = []
    
    #----- Calculate convex hull points -----#
    for contour in hull:
        for point in contour:
            if(point[0][0]!=0 and point[0][0]!=199 and point[0][1]!=0 and point[0][1]!=199):
                points.append([point[0][0], point[0][1]])
    
    indexhull = ConvexHull(points)
    
    n = 0
    hullPoints = []

    for simplex in indexhull.simplices:
        hullPoints.append([points[simplex[0]][0], points[simplex[0]][1]])
        n=n+1
        
    
    #----- Sort points -----#
    angles = [None] * n
    for i in range(0, n):
        angles[i] = math.atan2(hullPoints[i][1], hullPoints[i][0]);
    
    # Bubble sort
    for i in range(0, n):
        for j in range(i+1, n):
            if(angles[j]>angles[i]):
                tempAngle = angles[i]
                tempPoint = hullPoints[i]
                
                hullPoints[i] = hullPoints[j]
                angles[i] = angles[j]
                hullPoints[j] = tempPoint
                angles[j] = tempAngle
        
    #----- Calculate area -----#
    area = 0.0
    
    # Calculate value of shoelace formula 
    j = n - 1
    for i in range(0,n): 
        area += (hullPoints[j][0] + hullPoints[i][0]) * (hullPoints[j][1] - hullPoints[i][1])
        j = i   # j is previous vertex to i 
      
    return abs(0.5*area/40000*100)

#----------- Write to outputFile -----------#
import csv

header = ['Class', ' AreaAirplane', ' AreaConvexHull']
with open('trainData.csv', 'w') as csvFile:
    writer = csv.writer(csvFile)
    writer.writerow(header)
csvFile.close() 
    
for classNumber in range(0, 6):
    plt.figure(classNumber, figsize=(20, 20))
    for trainDataNumber in range(0,qtyTrainData):
        img_path = "../Data/aircraft-"+str(classNumber)+"/"+str(trainDataNumber)+".jpg"
        img = cv2.imread(img_path)
        
        #----------- Generate Convex hull -----------#
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        blur = cv2.blur(gray, (3, 3))
        #binarize the image
        ret, thresh = cv2.threshold(blur, 50, 255, cv2.THRESH_BINARY)
        # Finding contours for the binarized
        contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        
        # create hull array for convex hull points
        hull = []
        convexityDefects = [] 

        # calculate points for each contour
        for i in range(len(contours)):
            # creating convex hull object for each contour
            hull.append(cv2.convexHull(contours[i], False))

        # create an empty black image
        drawing = np.zeros((thresh.shape[0], thresh.shape[1], 3), np.uint8)

        
        # draw contours and hull points, and find convexity defects
        for i in range(len(contours)):
            color_contours = (0, 255, 0) # green - color for contours
            color = (0, 0, 255) # blue - color for convex hull
            cv2.drawContours(drawing, contours, i, color_contours, 1, 8, hierarchy)
            
        #----------- Show data -----------#
        plt.subplot(6, qtyTrainData, trainDataNumber+1)
        showConvexHull(hull, classNumber)
        plt.imshow(img) # Uncommment this line to see the plane img
        plt.axis("off")
        
        #----------- Calculate areas -----------#
        
        areaAircraft = calcAreaAircraft(thresh)
        areaConvexhull = calcAreaConvexhull(hull)
        
        print("Class ", classNumber, "AirCraft:", areaAircraft, "ConvexHull:", areaConvexhull)
        #----------- Update output file -----------#
        row = [str(classNumber), str(areaAircraft), str(areaConvexhull)]
        with open('trainData.csv', 'a') as csvFile:
            writer = csv.writer(csvFile)
            writer.writerow(row)
        
    plt.title("Class " + str(classNumber), fontsize=32)
    
csvFile.close()
